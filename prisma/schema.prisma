// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER 
  ADMIN
}

model User {
  id String @id @default(cuid())
  name String
  email String @unique
  phoneNumber String?
  password String?
  avatarUrl String?
  onBanned Boolean @default(false)
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  certificate Certificate[]
  transactions Transaction[]
}

model Course {
  id String @id @default(cuid())
  title String
  slug String
  description String
  price Int
  coverImage String
  isPublished Boolean @default(false)
  sections Section[]
  certificate Certificate[]
  flashsale Flashsale?
  transactions Transaction[]
}

model Section {
  id String @id @default(cuid())
  title String
  index Int @default(0)
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  lessons Lesson[]
}

model Lesson{
  id String @id @default(cuid())
  title String
  slug String
  videoUrl String
  index Int @default(0)
  isPreview Boolean @default(false)
  sectionId String

  section Section @relation(fields: [sectionId], references: [id])
}

model Flashsale{
  id String @id @default(cuid())
  newAmount Int
  courseId String @unique
  course Course @relation(fields: [courseId], references: [id])
}

enum RequestStatus {
  UNDER_REVIEW
  APPROVED
  NO_REQUEST
}

model Certificate {
  id String @id @default(cuid())
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  userId String 
  user User @relation(fields: [userId], references: [id])
  status RequestStatus @default(NO_REQUEST)
}

enum PaymentStatus {
  PAID
  UNPAID
}

model Transaction {
  id String @id @default(cuid())
  amount Int
  paymentStatus PaymentStatus @default(UNPAID)
  userId String
  user User @relation(fields: [userId], references: [id])
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  paymentLink String
  transactionId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}